// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  isAdmin  Boolean @default(true)
}

model Post {
  id        Int         @id @default(autoincrement())
  title     String
  date      DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  text      String?     @db.LongText
  published Boolean     @default(false)
  viewCount Int         @default(0)
  images    PostImage[]
}

model PostImage {
  id       Int     @id @default(autoincrement())
  filename String  @unique
  width    Int
  height   Int
  isMain   Boolean @default(false)
  post     Post?   @relation(fields: [postId], references: [id])
  postId   Int?
}

model Content {
  id     Int            @id @default(autoincrement())
  label  Label          @unique
  title  String?
  text   String         @db.LongText
  images ContentImage[]
}

model ContentImage {
  id        Int      @id @default(autoincrement())
  filename  String   @unique
  width     Int
  height    Int
  isMain    Boolean  @default(false)
  content   Content? @relation(fields: [contentId], references: [id])
  contentId Int?
}

enum Label {
  INTRO
  SLIDER
  ADDRESS
  PHONE
  EMAIL
  TEXT_CONTACT
  PRESENTATION
  DEMARCHE
  INSPIRATION
}

model Painting {
  id          Int               @id @default(autoincrement())
  title       String
  date        DateTime
  technique   String            @db.LongText
  description String?           @db.LongText
  height      Int
  width       Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isToSell    Boolean
  price       Int?
  sold        Boolean           @default(false)
  image       Image             @relation(fields: [imageId], references: [id])
  imageId     Int               @unique
  category    PaintingCategory? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model Sculpture {
  id          Int                @id @default(autoincrement())
  title       String
  date        DateTime
  technique   String             @db.LongText
  description String?            @db.LongText
  height      Int
  width       Int
  length      Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  isToSell    Boolean
  price       Int?
  sold        Boolean            @default(false)
  images      Image[]
  category    SculptureCategory? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model Image {
  id          Int        @id @default(autoincrement())
  filename    String     @unique
  width       Int
  height      Int
  isMain      Boolean    @default(false)
  painting    Painting?
  sculpture   Sculpture? @relation(fields: [sculptureId], references: [id])
  sculptureId Int?
}

model PaintingCategory {
  id        Int        @id @default(autoincrement())
  key       String     @unique
  value     String
  paintings Painting[]
}

model SculptureCategory {
  id         Int         @id @default(autoincrement())
  key        String      @unique
  value      String
  sculptures Sculpture[]
}
