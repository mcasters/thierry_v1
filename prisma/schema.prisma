// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Meta {
  id    Int    @id @default(autoincrement())
  label String @unique
  text  String @db.LongText
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  isAdmin  Boolean   @default(true)
  messages Message[]
}

model Message {
  id     Int      @id @default(autoincrement())
  date   DateTime
  text   String   @db.LongText
  author User     @relation(fields: [userId], references: [id])
  userId Int
}

model Post {
  id        Int         @id @default(autoincrement())
  type      String      @default("post")
  title     String
  date      DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  text      String?     @db.LongText
  published Boolean     @default(false)
  viewCount Int         @default(0)
  images    PostImage[]
}

model PostImage {
  id       Int     @id @default(autoincrement())
  filename String  @unique
  width    Int
  height   Int
  isMain   Boolean @default(false)
  post     Post?   @relation(fields: [postId], references: [id])
  postId   Int?
}

model Content {
  id     Int            @id @default(autoincrement())
  label  Label          @unique
  title  String?
  text   String         @db.LongText
  images ContentImage[]
}

model ContentImage {
  id        Int      @id @default(autoincrement())
  filename  String   @unique
  width     Int
  height    Int
  isMain    Boolean  @default(false)
  content   Content? @relation(fields: [contentId], references: [id])
  contentId Int?
}

enum Label {
  INTRO
  SLIDER
  ADDRESS
  PHONE
  EMAIL
  TEXT_CONTACT
  PRESENTATION
  DEMARCHE
  INSPIRATION
}

model Painting {
  id            Int               @id @default(autoincrement())
  type          String            @default("peinture")
  title         String
  date          DateTime
  technique     String            @db.LongText
  description   String?           @db.LongText
  height        Int
  width         Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  isToSell      Boolean           @default(false)
  price         Int?
  sold          Boolean           @default(false)
  imageFilename String            @default("")
  imageWidth    Int               @default(0)
  imageHeight   Int               @default(0)
  category      PaintingCategory? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
}

model Sculpture {
  id          Int                @id @default(autoincrement())
  type        String             @default("sculpture")
  title       String
  date        DateTime
  technique   String             @db.LongText
  description String?            @db.LongText
  height      Int
  width       Int
  length      Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  isToSell    Boolean            @default(false)
  price       Int?
  sold        Boolean            @default(false)
  images      SculptureImage[]
  category    SculptureCategory? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model SculptureImage {
  id          Int        @id @default(autoincrement())
  filename    String     @unique
  width       Int
  height      Int
  isMain      Boolean    @default(false)
  sculpture   Sculpture? @relation(fields: [sculptureId], references: [id])
  sculptureId Int?
}

model Drawing {
  id            Int              @id @default(autoincrement())
  type          String           @default("dessin")
  title         String
  date          DateTime
  technique     String           @db.LongText
  description   String?          @db.LongText
  height        Int
  width         Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  isToSell      Boolean          @default(false)
  price         Int?
  sold          Boolean          @default(false)
  imageFilename String           @default("")
  imageWidth    Int              @default(0)
  imageHeight   Int              @default(0)
  category      DrawingCategory? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
}

model PaintingCategory {
  id                Int              @id @default(autoincrement())
  key               String           @unique
  value             String
  paintings         Painting[]
  content           CategoryContent? @relation(fields: [categoryContentId], references: [id])
  categoryContentId Int?             @unique
}

model SculptureCategory {
  id                Int              @id @default(autoincrement())
  key               String           @unique
  value             String
  sculptures        Sculpture[]
  content           CategoryContent? @relation(fields: [categoryContentId], references: [id])
  categoryContentId Int?             @unique
}

model DrawingCategory {
  id                Int              @id @default(autoincrement())
  key               String           @unique
  value             String
  drawings          Drawing[]
  content           CategoryContent? @relation(fields: [categoryContentId], references: [id])
  categoryContentId Int?             @unique
}

model CategoryContent {
  id             Int                @id @default(autoincrement())
  title          String             @default("")
  text           String             @db.LongText
  imageFilename  String             @default("")
  imageWidth     Int                @default(0)
  imageHeight    Int                @default(0)
  paintCategory  PaintingCategory?
  sculptCategory SculptureCategory?
  drawCategory   DrawingCategory?
}

model Theme {
  id                      Int     @id @default(autoincrement())
  name                    String  @unique
  isActive                Boolean @default(false)
  lineColor_general       String
  titleColor_general      String
  menu1_background_home   String
  menu1_text_home         String
  menu1_link_home         String
  menu1_linkHover_home    String
  menu2_background_home   String
  menu2_text_home         String
  menu2_link_home         String
  menu2_linkHover_home    String
  main_background_home    String
  main_text_home          String
  main_link_home          String
  main_linkHover_home     String
  footer_background_home  String
  footer_text_home        String
  footer_link_home        String
  footer_linkHover_home   String
  menu1_background_item   String
  menu1_text_item         String
  menu1_link_item         String
  menu1_linkHover_item    String
  menu2_background_item   String
  menu2_text_item         String
  menu2_link_item         String
  menu2_linkHover_item    String
  main_background_item    String
  main_text_item          String
  main_link_item          String
  main_linkHover_item     String
  footer_background_item  String
  footer_text_item        String
  footer_link_item        String
  footer_linkHover_item   String
  menu1_background_other  String
  menu1_text_other        String
  menu1_link_other        String
  menu1_linkHover_other   String
  menu2_background_other  String
  menu2_text_other        String
  menu2_link_other        String
  menu2_linkHover_other   String
  main_background_other   String
  main_text_other         String
  main_link_other         String
  main_linkHover_other    String
  footer_background_other String
  footer_text_other       String
  footer_link_other       String
  footer_linkHover_other  String
}

model PresetColor {
  id    Int    @id @default(autoincrement())
  name  String @unique
  color String
}
